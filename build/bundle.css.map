{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../AutoCompleteSearch.svelte",
    "../../Map.svelte",
    "../../Charts.svelte",
    "../../Legend.svelte"
  ],
  "sourcesContent": [
    "<script>\n    import {\n        onMount\n    } from 'svelte';\n    import bbox from '@turf/bbox'\n    import AutoCompleteSearch from './components/AutoCompleteSearch.svelte'\n    import Map from './components/Map.svelte'\n    import Charts from './components/Charts.svelte'\n    import {dataStore} from './stores'\n    import d3 from './assets/d3.js'\n\n    onMount(() => {\n        //init data via d3js, then process data into to geojson\n        Promise.all([\n            d3.json(\"./datasets/new-york-counties.geojson\"),\n            d3.csv(\"./datasets/county.csv\"),\n            d3.csv(\"./datasets/facility.csv\")\n        ]).then(function (files) {\n            //extract geojson from topojson\n            const county = files[0] //topojson.feature(files[0], files[0].objects.cb_2015_new_york_county_20m);\n\n            //combine county data with csv\n            county.features.forEach(feature => {\n                //look up in csv\n                const name = feature.properties['NAME'];\n                const lawsuits = files[1].find(item => item['County'] === name)\n\n                if (lawsuits) {\n                    //calculate bounds\n\n                    const bounds = bbox(feature)\n\n                    feature.properties = {\n                        name,\n                        lawsuits: +lawsuits[\"Number of Lawsuits\"],\n                        lawsuits_per_10000: +lawsuits[\"Rate per 10,000 People\"],\n                        bounds\n                    }\n                } else {\n                    feature.properties = {name, lawsuits: null, lawsuits_per_10000: null}\n                }\n\n            })\n\n            //generate geojson from csv point data\n            const facility = {\n                \"type\": \"FeatureCollection\",\n                \"features\": []\n            }\n\n            files[2].forEach(item => {\n                //filter for only items with Lng, Lat\n                if(item['Lng'] && item['Lat']){\n                    facility.features.push({\n                        \"type\": \"Feature\",\n                        \"properties\": {\n                            name: item['Standardized Facility Name'].trim(),\n                            system: item['System'].trim(),\n                            lawsuits: +item['Number of Lawsuits'],\n                            link: item['Link'].trim(),\n                            id: item['ID'],\n                            windfall: item[\"ICP Windfall\"].trim()\n                        },\n                        \"geometry\": {\n                            \"type\": \"Point\",\n                            \"coordinates\": [\n                                item['Lng'],\n                                item['Lat']\n                            ]\n                        }\n                    })\n                }\n            })\n\n            dataStore.set({\n                county,\n                facility\n            })\n        }).catch(function (err) {\n            // handle error here\n            console.error(err.message)\n        })\n    })\n</script>\n\n<div class=\"svelte-chart\">\n   <AutoCompleteSearch/>\n    <div class=\"vis\">\n        <Map/>\n        <Charts/>\n    </div>\n</div>\n\n<style>\n    .svelte-chart{\n        width: 98%;\n    }\n\n    .vis {\n        display: flex;\n        flex-wrap: wrap;\n        box-shadow: 2px 2px rgba(30, 30, 30, 0.8);\n        border: 1px solid;\n        position: relative;\n    }\n</style>",
    "<script>\n    import {dataStore, mapStore} from '../stores'\n    let value = ''\n    let searchItems = []\n    let values = []\n    $: {\n        if($dataStore){\n            values = $dataStore.facility.features.map(feature => {\n                const prop = feature.properties;\n                const { name , system } = prop;\n                const coords = feature.geometry.coordinates;\n                return {name ,system, coords, text: `${name.toLowerCase()}, ${system.toLowerCase()}`}\n            })\n        }\n    }\n\n\n    function _set(item){\n        //reset\n        searchItems = []\n        value = item.name;\n\n        //zoom to location\n        $mapStore.flyTo({center: item.coords, zoom: 13})\n    }\n\n    function _search() {\n        if (value.length > 1) {\n            searchItems = values.filter(v => v.text.includes(value.toLowerCase())).slice(0,5)\n        }\n    }\n</script>\n\n<div class=\"content\">\n    <input class=\"search\"\n           type=\"text\"\n           placeholder=\"Type here to search by Hospital or System\"\n           bind:value\n           autocomplete=\"off\"\n           on:keyup=\"{_search}\"/>\n    <div class=\"autocomplete-items\">\n        {#each searchItems as item}\n            <div on:click=\"{() => _set(item)}\"><strong>{item.name}</strong>{item.system ? ` | ${item.system}`: ''}</div>\n        {/each}\n    </div>\n</div>\n\n<style>\n    .content{\n        position: relative;\n    }\n    .search {\n        width: 100%;\n    }\n\n    .autocomplete-items {\n        position: absolute;\n        border: 1px solid #d4d4d4;\n        border-bottom: none;\n        border-top: none;\n        z-index: 99;\n        /*position the autocomplete items to be the same width as the container:*/\n        top: 100%;\n        left: 0;\n        right: 0;\n    }\n\n    .autocomplete-items div {\n        padding: 5px 10px;\n        cursor: pointer;\n        background-color: #fff;\n        border-bottom: 1px solid #e0e0e0;\n    }\n\n    .autocomplete-items div:hover {\n        /*when hovering an item:*/\n        background-color: #e9e9e9;\n    }\n\n</style>",
    "<script>\n    import {\n        onMount\n    } from 'svelte';\n    import {dataStore, mapStore} from '../stores'\n    import Legend from './Legend.svelte'\n\n    let container;\n    let map;\n    let popup;\n    let clickPopup;\n\n    const legendItems = [\n        ['#d8d9da','N/D','black'],\n        ['#e2f7fe','0','black'],\n        ['#bfe1ec','1-10','black'],\n        ['#91c4db','11-50','black'],\n        ['#69b1ce','51-100','white'],\n        ['#006a92','101-150','white'],\n        ['#003b54','>150','white']\n    ]\n    let facilityLegendItems = []\n\n    onMount(() => {\n        mapboxgl.accessToken = 'pk.eyJ1IjoiemhpayIsImEiOiJjaW1pbGFpdHQwMGNidnBrZzU5MjF5MTJiIn0.N-EURex2qvfEiBsm-W9j7w';\n\n        map = new mapboxgl.Map({\n            container: 'map',\n            style: carto.basemaps.voyager,\n            center: [-76.358493, 42.650281],\n            zoom: 5,\n            minZoom: 3,\n            maxZoom: 15,\n            maxBounds: [[-84.2215,37.54457],[-66.0498,48.0487]]\n        });\n\n        //set map to store\n        mapStore.set(map)\n    })\n\n    $: {\n        //init sources and layers\n        if (map && $dataStore && !popup) {\n            const countySource = new carto.source.GeoJSON($dataStore.county);\n            const facilitySource = new carto.source.GeoJSON($dataStore.facility);\n            const countyLayer = new carto.Layer('county', countySource, new carto.Viz(`\n                color: ramp(\n                    zoomRange([6,10]),\n                        [opacity(ramp(buckets($lawsuits_per_10000, [0,1,11,51,101,150]),\n                        [#d8d9da, #e2f7fe,#bfe1ec,#91c4db,#69b1ce,#006a92,#003b54]),1)\n                        opacity(ramp(buckets($lawsuits_per_10000, [0,1,11,51,101,150]),\n                        [#d8d9da, #e2f7fe,#bfe1ec,#91c4db,#69b1ce,#006a92,#003b54]),0.85)\n                    ]\n                    )\n                strokeWidth: 1\n                strokeColor: ramp(zoomRange([6,8]),[#f9f9f9,#959595])\n            `));\n\n            const facilityLayer = new carto.Layer('facility', facilitySource, new carto.Viz(`\n                @category: ramp($system,prism)\n                @name: $name\n                @system: $system\n                @lawsuits: $lawsuits\n                @link: $link\n                @windfall: $windfall\n                width: ramp(buckets($lawsuits, [50,100,500,1000,5000]), [1.5,3,5,7,9,11])\n                strokeColor: rgba(171,70,78,0.9)\n                color: rgba(239,98,109,0.7)\n            `));\n\n            countyLayer.addTo(map);\n            facilityLayer.addTo(map);\n\n            facilityLayer.on('loaded', () => {\n                if (!facilityLayer.viz.width.getLegendData) {\n                    return;\n                }\n                facilityLegendItems = facilityLayer.viz.width.getLegendData().data\n            });\n\n\n            //popup\n            function formatDollarAmount(num){\n                return `$${Number((num).toFixed(1)).toLocaleString()}`\n            }\n\n            function generatePopupHTML(features) {\n                return features.map(feature => {\n                    const {name, system, lawsuits, link, windfall} = feature.variables\n                    return `\n                            <h4><a target=\"_blank\" href=\"${link.value}\">${name.value}</a></h4>\n                            ${system.value ? `<p><strong>System:</strong> ${system.value}</p>` : ''}\n                            <p><strong>Amount of Lawsuits:</strong> ${lawsuits.value}</p>\n                            ${windfall.value ? `<p><strong>2018 ICP Excess:</strong> ${formatDollarAmount(+windfall.value)}</p>` : ''}\n                        `\n                }).join('<br/>')\n            }\n\n            const interactivity = new carto.Interactivity(facilityLayer);\n            interactivity.on('featureClick', featureEvent => {\n                //create a click popup that will stay\n                const coords = featureEvent.coordinates;\n                const features = featureEvent.features;\n\n                if (features.length > 0) {\n                    let html = generatePopupHTML(features)\n\n                    if (clickPopup) clickPopup.remove()\n\n                    map.getCanvas().style.cursor = 'pointer';\n                    clickPopup = new mapboxgl.Popup()\n                            .setLngLat([coords.lng, coords.lat])\n                            .setHTML(html)\n                            .addTo(map);\n\n                }\n            });\n\n            interactivity.on('featureHover', featureEvent => {\n                const coords = featureEvent.coordinates;\n                const features = featureEvent.features;\n\n                if (features.length > 0) {\n                    let html = generatePopupHTML(features)\n\n                    if (popup) popup.remove()\n\n                    //only allow hover over , if clickup popup is not open\n                    if (!clickPopup || !clickPopup._closeButton.isConnected) {\n                        map.getCanvas().style.cursor = 'pointer';\n                        popup = new mapboxgl.Popup()\n                                .setLngLat([coords.lng, coords.lat])\n                                .setHTML(html)\n                                .addTo(map);\n                    }\n\n\n                }\n            });\n\n            interactivity.on('featureLeave', featureEvent => {\n                map.getCanvas().style.cursor = '';\n                if (popup) popup.remove()\n            })\n        }\n    }\n\n</script>\n\n<div class=\"content\">\n    <div id=\"map\" bind:this={container}></div>\n    <Legend countyLegend={legendItems} facilityLegend={facilityLegendItems}/>\n</div>\n\n<style>\n    .content {\n        height: 500px;\n        flex: 1 1 340px;\n        min-width: 340px;\n        overflow: auto;\n        background: #ebebeb;\n        display: flex;\n        flex-direction: column;\n        position: relative;\n    }\n\n    #map {\n        width: 100%;\n        height: 100%;\n    }\n\n    :global(.mapboxgl-popup-content) {\n        overflow: auto;\n        max-height: 200px;\n    }\n\n    :global(.mapboxgl-popup-content p, h4) {\n        margin: 0px 5px;\n    }\n\n    :global(.mapboxgl-ctrl){\n        font-size: 0.5rem;\n    }\n</style>",
    "<script>\n    import {dataStore, mapStore} from '../stores'\n    import d3 from '../assets/d3.js'\n\n    let container\n    let clientWidth\n    let svg\n\n    $: {\n        if ($dataStore && clientWidth) {\n            const margin = {top: 20, right: 20, bottom: 100, left: 40},\n                    width = clientWidth - margin.left - margin.right,\n                    height = 400 - margin.top - margin.bottom;\n\n            // set the ranges\n            const x = d3.scaleBand()\n                    .range([0, width])\n                    .padding(0.1);\n            const y = d3.scaleLinear()\n                    .range([height, 0]);\n\n            function getColor(num) {\n                return num > 150\n                        ? \"#003b54\"\n                        : num > 101\n                                ? \"#006a92\"\n                                : num > 51\n                                        ? \"#69b1ce\"\n                                        : num > 11\n                                                ? \"#91c4db\"\n                                                : num > 1\n                                                        ? \"#bfe1ec\"\n                                                        : num > 0\n                                                                ? \"#e2f7fe\"\n                                                                : \"#d8d9da\";\n            }\n\n            // append the svg object to the body of the page\n            // append a 'group' element to 'svg'\n            // moves the 'group' element to the top left margin\n            if (svg) svg.remove()\n\n            svg = d3.select(container)\n                    .attr(\"width\", width + margin.left + margin.right)\n                    .attr(\"height\", height + margin.top + margin.bottom)\n                    .append(\"g\")\n                    .attr(\"transform\",\n                            \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n            // Define the div for the tooltip\n            const tooltip = d3.select(\"body\").append(\"div\")\n                    .attr(\"class\", \"tooltip\")\n                    .style(\"opacity\", 0);\n\n            const facility_data = $dataStore.county.features.map(feature => feature.properties).filter(feature => feature.lawsuits_per_10000)\n            x.domain(facility_data.map(function (d) {\n                return d.name;\n            }));\n            y.domain([0, d3.max(facility_data, function (d) {\n                return d.lawsuits_per_10000;\n            })]);\n\n            // append the rectangles for the bar chart\n            svg.selectAll(\".bar\")\n                    .data(facility_data)\n                    .enter().append(\"rect\")\n                    .attr(\"class\", \"bar\")\n                    .attr(\"x\", function (d) {\n                        return x(d.name);\n                    })\n                    .attr(\"width\", x.bandwidth())\n                    .attr(\"y\", function (d) {\n                        return y(d.lawsuits_per_10000);\n                    })\n                    .attr(\"height\", function (d) {\n                        return height - y(d.lawsuits_per_10000);\n                    })\n                    .attr(\"fill\", function (d) {\n                        return getColor(d.lawsuits_per_10000)\n                    })\n                    .on(\"mouseover\", d => {\n                        tooltip.transition()\n                                .duration(100)\n                                .style(\"opacity\", .9);\n                        tooltip.html(`\n                                <p><strong>${d.name}</strong></p>\n                                <p><strong>Lawsuits:</strong> ${d.lawsuits}</p>\n                                <p><strong>Rate per 10,000:</strong> ${d.lawsuits_per_10000}</p>\n                        `)\n                                .style(\"left\", (d3.event.pageX) + \"px\")\n                                .style(\"top\", (d3.event.pageY - 28) + \"px\");\n                    })\n                    .on(\"mouseout\", d => {\n                        tooltip.transition()\n                                .duration(400)\n                                .style(\"opacity\", 0);\n                    })\n                    .on(\"click\", d => {\n                        $mapStore.fitBounds(d.bounds, {\n                            padding: 20\n                        });\n                    })\n\n            // add the x Axis\n            svg.append(\"g\")\n                    .attr(\"transform\", \"translate(0,\" + height + \")\")\n                    .call(d3.axisBottom(x))\n                    .selectAll(\"text\")\n                    .style(\"text-anchor\", \"end\")\n                    .attr(\"dx\", \"-.8em\")\n                    .attr(\"dy\", \".15em\")\n                    .attr(\"transform\", \"rotate(-60)\")\n\n            // add the y Axis\n            svg.append(\"g\")\n                    .call(d3.axisLeft(y));\n        }\n    }\n</script>\n\n<div class=\"content\" bind:clientWidth={clientWidth}>\n    <h4>Hospital Lawsuits Against Patients by County, 2015–2019</h4>\n    <h5>Rate per 10,000 People</h5>\n    <svg class=\"chart\" bind:this={container}></svg>\n    <h6>Zoom in or search to show lawsuits by hospital facility</h6>\n</div>\n\n<style>\n    .content {\n        height: 500px;\n        flex: 1 1 420px;\n        min-width: 400px;\n        overflow-x: auto;\n        background: #f6f6f6;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n    }\n\n    h4 {\n        margin-top: 1rem;\n    }\n\n    h5 {\n        margin: 0;\n        color: #999999;\n    }\n\n    svg {\n        font: 10px sans-serif;\n    }\n\n\n    :global(div.tooltip) {\n        color: white;\n        position: absolute;\n        text-align: center;\n        width: 100px;\n        padding: 2px;\n        font: 12px sans-serif;\n        background: rgba(0, 0, 0, .8);\n        pointer-events: none;\n    }\n\n    :global(div.tooltip p) {\n        margin: 2px;\n    }\n\n    .button {\n        background-color: #ddd;\n        border: none;\n        color: black;\n        padding: 10px 20px;\n        text-align: center;\n        text-decoration: none;\n        display: inline-block;\n        margin: 4px 2px;\n        cursor: pointer;\n        border-radius: 16px;\n    }\n\n</style>",
    "<script>\r\n    export let countyLegend = []\r\n    export let facilityLegend = []\r\n    let opened = true\r\n\r\n    $: console.log(facilityLegend)\r\n</script>\r\n\r\n<div id=\"legend\">\r\n    <p class=\"title\" on:click={() => opened = !opened}><strong>Legend </strong> ({opened ? 'hide': 'show'})</p>\r\n    {#if opened}\r\n        <hr>\r\n        <p class=\"legend-item\"><strong>County:</strong> # of lawsuits 10,000 People</p>\r\n        {#each countyLegend as item}\r\n            <i style=\"background: {item[0]}; color: {item[2]};\">{item[1]}</i><br/>\r\n        {/each}\r\n        <hr>\r\n        <p class=\"legend-item\"><strong>Facility:</strong> # of lawsuits</p>\r\n        <div class=\"bubble-legend\">\r\n            <ul class=\"bubble-list\">\r\n                {#each facilityLegend as item, i}\r\n                    <li class=\"bubble-item\">\r\n                        <div class=\"bubble-label\" style=\"bottom: {i * 20 - 1}%;\">\r\n                            <div class=\"bubble-numbers\">{item.key[0] < 0 ? 1 : item.key[0]}</div>\r\n                        </div>\r\n                        <div class=\"bubble-circle\">\r\n                            <span class=\"circle\" style=\"bottom: {i * 20}%; height: {`${item.value * 1.2}px`} ; width: {`${item.value * 1.2}px`};\"></span>\r\n                        </div>\r\n                    </li>\r\n                {/each}\r\n            </ul>\r\n        </div>\r\n    {/if}\r\n</div>\r\n\r\n<style>\r\n    #legend {\r\n        font-size: 1rem;\r\n        line-height: 18px;\r\n        color: #555;\r\n        position: absolute;\r\n        bottom: 40px;\r\n        left: 10px;\r\n        z-index: 2;\r\n        background-color: rgba(255,255,255,0.8);\r\n        padding: 4px;\r\n        border-radius: 4px;\r\n        max-width: 100px;\r\n        border: 1px solid rgba(0,0,0,0.3);\r\n    }\r\n\r\n    .legend-item{\r\n        margin-bottom: 0.5rem;\r\n    }\r\n\r\n    #legend p{\r\n        margin: 0 0 5px 0;\r\n    }\r\n\r\n    #legend .title{\r\n        font-size: 0.5rem;\r\n    }\r\n\r\n    #legend .title strong{\r\n        font-size: 1.3rem;\r\n        font-style: italic;\r\n    }\r\n\r\n    #legend i {\r\n        width: 100%;\r\n        height: 18px;\r\n        float: left;\r\n        margin-right: 8px;\r\n        text-align: center;\r\n        opacity: 0.8;\r\n    }\r\n\r\n    .bubble-legend{\r\n        display: block;\r\n        height: 75px;\r\n    }\r\n\r\n    .bubble-list{\r\n        height: 100%;\r\n        width: 100%;\r\n        color: rgb(61, 33, 33);\r\n        list-style: none;\r\n        position: relative;\r\n        padding-left: 5px;\r\n    }\r\n\r\n    .bubble-item{\r\n    }\r\n\r\n    .bubble-label{\r\n        position: absolute;\r\n        font-size: 0.7rem;\r\n        line-height: 0.9rem;\r\n    }\r\n\r\n    .bubble-circle{\r\n        opacity: .9;\r\n        right: 0;\r\n    }\r\n\r\n    .circle{\r\n        display: block;\r\n        position: absolute;\r\n        bottom: 0;\r\n        left: 50%;\r\n        width: 100%;\r\n        height: 100%;\r\n        transform: translate3d(-50%,0,0);\r\n        border: 1px solid rgb(171,70,78);\r\n        border-radius: 50%;\r\n        color: #ef626d;\r\n        background-color: #ef626d;\r\n        box-shadow: -1px 0 2px 0 rgba(0,0,0,.1);\r\n        pointer-events: none;\r\n    }\r\n</style>"
  ],
  "names": [],
  "mappings": "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"
}